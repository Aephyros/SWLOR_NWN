//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SWLOR.Game.Server.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DataContext : DbContext
    {
        public DataContext()
            : base("name=DataContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ApartmentBuilding> ApartmentBuildings { get; set; }
        public virtual DbSet<Area> Areas { get; set; }
        public virtual DbSet<AreaWalkmesh> AreaWalkmeshes { get; set; }
        public virtual DbSet<Association> Associations { get; set; }
        public virtual DbSet<Attribute> Attributes { get; set; }
        public virtual DbSet<AuthorizedDM> AuthorizedDMs { get; set; }
        public virtual DbSet<Background> Backgrounds { get; set; }
        public virtual DbSet<BankItem> BankItems { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<BaseItemType> BaseItemTypes { get; set; }
        public virtual DbSet<BaseStructure> BaseStructures { get; set; }
        public virtual DbSet<BaseStructureType> BaseStructureTypes { get; set; }
        public virtual DbSet<BugReport> BugReports { get; set; }
        public virtual DbSet<BuildingStyle> BuildingStyles { get; set; }
        public virtual DbSet<BuildingType> BuildingTypes { get; set; }
        public virtual DbSet<ChatChannelsDomain> ChatChannelsDomains { get; set; }
        public virtual DbSet<ChatLog> ChatLogs { get; set; }
        public virtual DbSet<ClientLogEvent> ClientLogEvents { get; set; }
        public virtual DbSet<ClientLogEventTypesDomain> ClientLogEventTypesDomains { get; set; }
        public virtual DbSet<ComponentType> ComponentTypes { get; set; }
        public virtual DbSet<CooldownCategory> CooldownCategories { get; set; }
        public virtual DbSet<CraftBlueprintCategory> CraftBlueprintCategories { get; set; }
        public virtual DbSet<CraftBlueprint> CraftBlueprints { get; set; }
        public virtual DbSet<CraftDevice> CraftDevices { get; set; }
        public virtual DbSet<DiscordChatQueue> DiscordChatQueues { get; set; }
        public virtual DbSet<DMRoleDomain> DMRoleDomains { get; set; }
        public virtual DbSet<Download> Downloads { get; set; }
        public virtual DbSet<EnmityAdjustmentRule> EnmityAdjustmentRules { get; set; }
        public virtual DbSet<FameRegion> FameRegions { get; set; }
        public virtual DbSet<GameTopicCategory> GameTopicCategories { get; set; }
        public virtual DbSet<GameTopic> GameTopics { get; set; }
        public virtual DbSet<GrowingPlant> GrowingPlants { get; set; }
        public virtual DbSet<ItemType> ItemTypes { get; set; }
        public virtual DbSet<KeyItemCategory> KeyItemCategories { get; set; }
        public virtual DbSet<KeyItem> KeyItems { get; set; }
        public virtual DbSet<LootTableItem> LootTableItems { get; set; }
        public virtual DbSet<LootTable> LootTables { get; set; }
        public virtual DbSet<Mod> Mods { get; set; }
        public virtual DbSet<NPCGroup> NPCGroups { get; set; }
        public virtual DbSet<PCBasePermission> PCBasePermissions { get; set; }
        public virtual DbSet<PCBase> PCBases { get; set; }
        public virtual DbSet<PCBaseStructureItem> PCBaseStructureItems { get; set; }
        public virtual DbSet<PCBaseStructurePermission> PCBaseStructurePermissions { get; set; }
        public virtual DbSet<PCBaseStructure> PCBaseStructures { get; set; }
        public virtual DbSet<PCBaseType> PCBaseTypes { get; set; }
        public virtual DbSet<PCCooldown> PCCooldowns { get; set; }
        public virtual DbSet<PCCraftedBlueprint> PCCraftedBlueprints { get; set; }
        public virtual DbSet<PCCustomEffect> PCCustomEffects { get; set; }
        public virtual DbSet<PCImpoundedItem> PCImpoundedItems { get; set; }
        public virtual DbSet<PCKeyItem> PCKeyItems { get; set; }
        public virtual DbSet<PCMapPin> PCMapPins { get; set; }
        public virtual DbSet<PCMapProgression> PCMapProgressions { get; set; }
        public virtual DbSet<PCMigrationItem> PCMigrationItems { get; set; }
        public virtual DbSet<PCMigration> PCMigrations { get; set; }
        public virtual DbSet<PCObjectVisibility> PCObjectVisibilities { get; set; }
        public virtual DbSet<PCOutfit> PCOutfits { get; set; }
        public virtual DbSet<PCOverflowItem> PCOverflowItems { get; set; }
        public virtual DbSet<PCPerkRefund> PCPerkRefunds { get; set; }
        public virtual DbSet<PCPerk> PCPerks { get; set; }
        public virtual DbSet<PCQuestItemProgress> PCQuestItemProgresses { get; set; }
        public virtual DbSet<PCQuestKillTargetProgress> PCQuestKillTargetProgresses { get; set; }
        public virtual DbSet<PCQuestStatus> PCQuestStatus { get; set; }
        public virtual DbSet<PCRegionalFame> PCRegionalFames { get; set; }
        public virtual DbSet<PCSearchSiteItem> PCSearchSiteItems { get; set; }
        public virtual DbSet<PCSearchSite> PCSearchSites { get; set; }
        public virtual DbSet<PCSkill> PCSkills { get; set; }
        public virtual DbSet<PerkCategory> PerkCategories { get; set; }
        public virtual DbSet<PerkExecutionType> PerkExecutionTypes { get; set; }
        public virtual DbSet<PerkLevelQuestRequirement> PerkLevelQuestRequirements { get; set; }
        public virtual DbSet<PerkLevel> PerkLevels { get; set; }
        public virtual DbSet<PerkLevelSkillRequirement> PerkLevelSkillRequirements { get; set; }
        public virtual DbSet<Perk> Perks { get; set; }
        public virtual DbSet<Plant> Plants { get; set; }
        public virtual DbSet<PlayerCharacter> PlayerCharacters { get; set; }
        public virtual DbSet<QuestKillTargetList> QuestKillTargetLists { get; set; }
        public virtual DbSet<QuestPrerequisite> QuestPrerequisites { get; set; }
        public virtual DbSet<QuestRequiredItemList> QuestRequiredItemLists { get; set; }
        public virtual DbSet<QuestRequiredKeyItemList> QuestRequiredKeyItemLists { get; set; }
        public virtual DbSet<QuestRewardItem> QuestRewardItems { get; set; }
        public virtual DbSet<Quest> Quests { get; set; }
        public virtual DbSet<QuestState> QuestStates { get; set; }
        public virtual DbSet<QuestTypeDomain> QuestTypeDomains { get; set; }
        public virtual DbSet<ServerConfiguration> ServerConfigurations { get; set; }
        public virtual DbSet<SkillCategory> SkillCategories { get; set; }
        public virtual DbSet<Skill> Skills { get; set; }
        public virtual DbSet<SkillXPRequirement> SkillXPRequirements { get; set; }
        public virtual DbSet<SpawnObject> SpawnObjects { get; set; }
        public virtual DbSet<SpawnObjectType> SpawnObjectTypes { get; set; }
        public virtual DbSet<Spawn> Spawns { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<DatabaseVersion> DatabaseVersions { get; set; }
        public virtual DbSet<CustomEffectCategory> CustomEffectCategories { get; set; }
        public virtual DbSet<CustomEffect> CustomEffects { get; set; }
    
        [DbFunction("DataContext", "fn_GetPlayerEffectivePerkLevel")]
        public virtual IQueryable<fn_GetPlayerEffectivePerkLevel_Result> fn_GetPlayerEffectivePerkLevel(string playerID, Nullable<int> perkID, Nullable<int> skillLevel)
        {
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            var perkIDParameter = perkID.HasValue ?
                new ObjectParameter("PerkID", perkID) :
                new ObjectParameter("PerkID", typeof(int));
    
            var skillLevelParameter = skillLevel.HasValue ?
                new ObjectParameter("SkillLevel", skillLevel) :
                new ObjectParameter("SkillLevel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetPlayerEffectivePerkLevel_Result>("[DataContext].[fn_GetPlayerEffectivePerkLevel](@PlayerID, @PerkID, @SkillLevel)", playerIDParameter, perkIDParameter, skillLevelParameter);
        }
    
        public virtual int DeleteAreaWalkmeshes(string areaID)
        {
            var areaIDParameter = areaID != null ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAreaWalkmeshes", areaIDParameter);
        }
    
        public virtual ObjectResult<GetCategoriesAvailableToPC_Result> GetCategoriesAvailableToPC(string playerID)
        {
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategoriesAvailableToPC_Result>("GetCategoriesAvailableToPC", playerIDParameter);
        }
    
        public virtual ObjectResult<GetCraftCategoriesAvailableToPCByDeviceID_Result> GetCraftCategoriesAvailableToPCByDeviceID(Nullable<int> deviceID, string playerID)
        {
            var deviceIDParameter = deviceID.HasValue ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(int));
    
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCraftCategoriesAvailableToPCByDeviceID_Result>("GetCraftCategoriesAvailableToPCByDeviceID", deviceIDParameter, playerIDParameter);
        }
    
        public virtual ObjectResult<GetPCBlueprintsByCategoryID_Result> GetPCBlueprintsByCategoryID(string playerID, Nullable<int> craftCategoryID)
        {
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            var craftCategoryIDParameter = craftCategoryID.HasValue ?
                new ObjectParameter("CraftCategoryID", craftCategoryID) :
                new ObjectParameter("CraftCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPCBlueprintsByCategoryID_Result>("GetPCBlueprintsByCategoryID", playerIDParameter, craftCategoryIDParameter);
        }
    
        public virtual ObjectResult<GetPCCraftBlueprintsByDeviceAndCategoryID_Result> GetPCCraftBlueprintsByDeviceAndCategoryID(Nullable<int> deviceID, Nullable<int> craftCategoryID, string playerID)
        {
            var deviceIDParameter = deviceID.HasValue ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(int));
    
            var craftCategoryIDParameter = craftCategoryID.HasValue ?
                new ObjectParameter("CraftCategoryID", craftCategoryID) :
                new ObjectParameter("CraftCategoryID", typeof(int));
    
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPCCraftBlueprintsByDeviceAndCategoryID_Result>("GetPCCraftBlueprintsByDeviceAndCategoryID", deviceIDParameter, craftCategoryIDParameter, playerIDParameter);
        }
    
        public virtual ObjectResult<GetPCPerksByExecutionType_Result> GetPCPerksByExecutionType(string playerID, Nullable<int> executionTypeID)
        {
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            var executionTypeIDParameter = executionTypeID.HasValue ?
                new ObjectParameter("ExecutionTypeID", executionTypeID) :
                new ObjectParameter("ExecutionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPCPerksByExecutionType_Result>("GetPCPerksByExecutionType", playerIDParameter, executionTypeIDParameter);
        }
    
        public virtual ObjectResult<GetPCPerksForMenuHeader_Result> GetPCPerksForMenuHeader(string playerID)
        {
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPCPerksForMenuHeader_Result>("GetPCPerksForMenuHeader", playerIDParameter);
        }
    
        public virtual ObjectResult<GetPCPerksWithExecutionType_Result> GetPCPerksWithExecutionType(string playerID)
        {
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPCPerksWithExecutionType_Result>("GetPCPerksWithExecutionType", playerIDParameter);
        }
    
        public virtual ObjectResult<GetPCSkillAdjustedPerkLevel_Result> GetPCSkillAdjustedPerkLevel(string playerID, Nullable<int> perkID)
        {
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            var perkIDParameter = perkID.HasValue ?
                new ObjectParameter("PerkID", perkID) :
                new ObjectParameter("PerkID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPCSkillAdjustedPerkLevel_Result>("GetPCSkillAdjustedPerkLevel", playerIDParameter, perkIDParameter);
        }
    
        public virtual ObjectResult<GetPerkCategoriesForPC_Result> GetPerkCategoriesForPC(string playerID)
        {
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPerkCategoriesForPC_Result>("GetPerkCategoriesForPC", playerIDParameter);
        }
    
        public virtual ObjectResult<GetPerksForPC_Result> GetPerksForPC(string playerID, Nullable<int> categoryID)
        {
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPerksForPC_Result>("GetPerksForPC", playerIDParameter, categoryIDParameter);
        }
    
        public virtual ObjectResult<TotalSkillXPResult> GetTotalXPAmountsForPC(string playerID, Nullable<int> skillID)
        {
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            var skillIDParameter = skillID.HasValue ?
                new ObjectParameter("SkillID", skillID) :
                new ObjectParameter("SkillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TotalSkillXPResult>("GetTotalXPAmountsForPC", playerIDParameter, skillIDParameter);
        }
    
        public virtual int InsertAllPCSkillsByID(string playerID)
        {
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAllPCSkillsByID", playerIDParameter);
        }
    
        public virtual int ADM_Drop_Column(string tableName, string columnName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADM_Drop_Column", tableNameParameter, columnNameParameter);
        }
    
        public virtual int ADM_Drop_Constraint(string tableName, string columnName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADM_Drop_Constraint", tableNameParameter, columnNameParameter);
        }
    }
}
